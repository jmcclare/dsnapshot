#! /bin/bash

#
# dsnapshot - directory snapshot
#
# See DESCRIPTION below in print_help(), or run dsnapshot --help
#

main()
{
    tmp_dir=''

    # These need to be exported because the perl one-liner that fills in the
    # variables in the config file template only subsitutes environment
    # variables.
    export source_dir=''
    export snapshot_dir=''

    #
    # Parse the command-line arguments.
    #
    # Code borrowed and modified from here: http://www.digitalpeer.com/id/parsing
    # ...with additional help from here:
    # http://www.linuxjournal.com/content/bash-parameter-expansion
    #
    for i in $*
    do
        case $i in
            -s=*|--source-dir=*)
                source_dir=${i#*=}
                ;;
            -d=*|--snapshot-dir=*)
                snapshot_dir=${i#*=}
                ;;
            -v|--debug)
                export DEBUG=true
                ;;
            -t|--test)
                export TEST=true
                ;;
            -h|--help)
                print_help
                exit
                ;;
            *)
                if [ -z "${source_dir}" ]
                then
                    source_dir="${i}"
                elif [ -z "${snapshot_dir}" ]
                then
                    snapshot_dir="${i}"
                else
                    # The only unnamed options are the source dir and the
                    # snapshot dir, in that order. Anything else that’s not
                    # recognized is an error.
                    alarm "ERROR: Unknown option '${i}'"
                    echo
                    echo "Usage:"
                    print_help
                    exit 1
                fi
            ;;
        esac
    done

    if [[ $TEST == true ]]
    then
        cfg_template="$(dirname $0)/template-rsnapshot.conf"
    elif [ -f "$(dirname $0)/template-rsnapshot.conf" ]
    then
        cfg_template="$(dirname $0)/template-rsnapshot.conf"
    else
        cfg_template='/usr/share/dsnapshot/template-rsnapshot.conf'
    fi

    if [ ! -f "${cfg_template}" ]
    then
        die "Template file ${cfg_template} missing."
    fi

    if [ -z "${source_dir}" ]
    then
        die 'ERROR: No source dir specified.'
    fi

    check_directory "${source_dir}"

    # Convert $source_dir to a full path with a trailing slash.
    source_dir="$(cd $source_dir && pwd)/"
    debug "source_dir: ${source_dir}"

    if [ ! -z "${snapshot_dir}" ]
    then
        check_directory "${snapshot_dir}"
    else
        snapshot_dir="$(dirname ${source_dir})/snapshots"

        if [ ! -d "${snapshot_dir}" ]
        then
            mkdir "${snapshot_dir}"
            check_err $? 'Snapshot directory could not be created.'
        fi
    fi

    # Convert $snapshot_dir to a full path with a trailing slash.
    snapshot_dir="$(cd $snapshot_dir && pwd)/"
    debug "snapshot_dir: ${snapshot_dir}"

    # This is deleted anytime we exit, including with errors. See the clean_up
    # function below.
    temp_dir=$(mktemp -d --tmpdir=/tmp dsnapshot-XXXXXXXX)
    check_err $? 'ERROR: temp directory could not be created.'
    rsnapshot_cfg="${temp_dir}/rsnapshot.conf"

    #
    # This convoluted perl expression comes from
    # https://stackoverflow.com/questions/2914220/bash-templating-how-to-build-configuration-files-from-templates-with-bash/25019138#25019138
    #
    # It goes through each environment variable and searches the config file
    # template for matching bash variable declarations. It replaces them with
    # the environment variable values. To add a variable to the environment
    # export it like we do at the top of this program.
    #
    # You can leave bash variable names in plain text in the config file but
    # backslash escaping the $. No other backslash escaping is supported or
    # necessary.
    #
    perl -pe 's;(\\*)(\$([a-zA-Z_][a-zA-Z_0-9]*)|\$\{([a-zA-Z_][a-zA-Z_0-9]*)\});substr($1,0,int(length($1)/2)).(length($1)%2?$2:$ENV{$3||$4});eg' "${cfg_template}" > "${rsnapshot_cfg}"

    # Always make a daily snapshot.
    rsnapshot -c "${rsnapshot_cfg}" daily

    # Make a weekly snapshot if it is the first day of the week (Sunday)
    if [ "$(date +%w)" = '0' ]
    then
        debug 'Making weekly snapshot...'
        rsnapshot -c "${rsnapshot_cfg}" weekly
    fi

    # Make a monthly snapshot if it is the first day of the month.
    if [ "$(date +%d)" = '01' ]
    then
        debug 'Making monthly snapshot...'
        rsnapshot -c "${rsnapshot_cfg}" monthly
    fi
}


print_help()
{
    printf "NAME
    dsnapshot

SYNOPSIS
    dsnapshot [OPTION...] SOURCE_DIR [DESTINATION_DIR]

DESCRIPTION
    Uses rsnapshot to make incremental versions of a directory on the same
    volume.

OPTIONS
    -s, --source-dir
        The directory to make snapshots of.

    -d, --snapshot-dir
        The directory to make the snapshots in. Defaults to a directory named
        'snapshots' in the same directory as the source directory.

    -d, --debug
        Enable debug output.

    -t, --test
        Test mode for development. Set certain variables to hardcoded defaults.

    -h, --help
        print this help text and exit.

EXAMPLES
    dsnapshot /home/fred/Documents /home/fred/backup/Documents

    dsnapshot /srv/backup/users/fred/music/latest /srv/backup/users/fred/music/snapshots
"
}


#
# Clean up the temp file.
#
# The trap command ensures this is called upon exit, even if the program exits
# with an error.
#
clean_up()
{
    if [ -d "${temp_dir}" ]
    then
        rm -rf "${temp_dir}"
    fi
}
trap clean_up EXIT


#
# warn - print warning message
#
# $1 - message
#
warn()
{
    # print to regular output in regular orange
    printf "\e[0;33m"
    # Print the message with `echo` to prevent anything in the string from
    # being interpreted as formatting characters.
    echo "${1}"
    printf "\e[m"
}


#
# alarm - print alarm / error message
#
# $1 - message
#
alarm()
{
    # print to error output in bold red
    printf "\e[1;31m" >&2
    # Print the message with `echo` to prevent anything in the string from
    # being interpreted as formatting characters.
    echo "${1}" >&2
    printf "\e[m" >&2
}


#
# die - print an alarm message and exit with an error code
#
# $1 - error message to print
# $2 - (optional) error code to exit with, defaults to 1
#
die()
{
    alarm "${1}"

    if [ ! -z "${2}" ]
    then
        exit ${2}
    else
        exit 1
    fi
}


#
# check_err - check an error code and exit if it’s not success (0).
#
# $1 - return code to check
# $2 - (optional) text to display on failure. Defaults to basic message.
#
check_err()
{
    local a=$1

    # Empty strings will evaluate as equal to 0, so check for them first.
    if [ -z "${a}" ]
    then
        failure=true
    elif ! (( a == 0 ))
    then
        failure=true
    fi

    if [[ $failure == true ]]
    then
        if [ -z "${2}" ]
        then
            message="Command returned fatal error."
        else
            message="${2}"
        fi
        die "${message}" "${1}"
    fi
}


#
# debug - print debug message to stderr if DEBUG is set to true
#
# $1 - message
#
debug()
{
    if [[ $DEBUG == true ]]
    then
        echo "${1}" >&2
    fi
}


#
# check_directory - check to see if a directory exists
#
check_directory()
{
    if [ ! -d "${1}" ]
    then
        die "Directory $1 does not exist. Aborting."
    fi
}

main "${@}"
