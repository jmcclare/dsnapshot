#! /bin/bash

#
# dsnapshot - directory snapshot
#
# See DESCRIPTION below in print_help(), or run dsnapshot --help
#
# Note on exit codes:
#
#   Some shell programmers use the exit codes defined in
#   /usr/include/asm-generic/errno.h. Some use the codes defined in
#   /usr/include/sysexits.h. Others
#   (http://tldp.org/LDP/abs/html/exitcodes.html) try to avoid those codes.
#   This program uses the codes defined in /usr/include/sysexits.h if
#   applicable, other codes from 79–113 if needed, or the generic 0 for success
#   and 1 for failure.
#

function main
{
    # These need to be exported because the perl one-liner that fills in the
    # variables in the config file template only subsitutes environment
    # variables.
    export source_dir=''
    export snapshot_dir=''


    parse_opts "${@}"


    # Determine which config file template to use.

    if [[ $TEST == true ]]
    then
        cfg_template="$(dirname $0)/template-rsnapshot.conf"

    # Look for a config file template in the same directory as the command
    # first.
    elif [ -f "$(dirname $0)/template-rsnapshot.conf" ]
    then
        cfg_template="$(dirname $0)/template-rsnapshot.conf"

    # Look for a config file template in /etc/dsnapshot
    elif [ -f "/etc/dsnapshot/template-rsnapshot.conf" ]
    then
        cfg_template="/etc/dsnapshot/template-rsnapshot.conf"

    # Assume there is a config file template in /usr/share/dsnapshot
    else
        cfg_template='/usr/share/dsnapshot/template-rsnapshot.conf'
    fi

    if [ ! -f "${cfg_template}" ]
    then
        die "Template file ${cfg_template} missing."
    fi


    # This is deleted anytime we exit, including with errors. See the clean_up
    # function below.
    temp_dir=$(mktemp -d --tmpdir=/tmp dsnapshot-XXXXXXXX)
    check_err $? 'ERROR: temp directory could not be created.'
    rsnapshot_cfg="${temp_dir}/rsnapshot.conf"


    #
    # This convoluted perl expression comes from
    # https://stackoverflow.com/questions/2914220/bash-templating-how-to-build-configuration-files-from-templates-with-bash/25019138#25019138
    #
    # It goes through each environment variable and searches the config file
    # template for matching bash variable declarations. It replaces them with
    # the environment variable values. To add a variable to the environment
    # export it like we do at the top of this program.
    #
    # You can leave bash variable names in plain text in the config file but
    # backslash escaping the $. No other backslash escaping is supported or
    # necessary.
    #
    perl -pe 's;(\\*)(\$([a-zA-Z_][a-zA-Z_0-9]*)|\$\{([a-zA-Z_][a-zA-Z_0-9]*)\});substr($1,0,int(length($1)/2)).(length($1)%2?$2:$ENV{$3||$4});eg' "${cfg_template}" > "${rsnapshot_cfg}"


    # Always make a daily snapshot.
    rsnapshot -c "${rsnapshot_cfg}" daily

    # Make a weekly snapshot if it is the first day of the week (Sunday)
    if [ "$(date +%w)" = '0' ]
    then
        debug 'Making weekly snapshot...'
        rsnapshot -c "${rsnapshot_cfg}" weekly
    fi

    # Make a monthly snapshot if it is the first day of the month.
    if [ "$(date +%d)" = '01' ]
    then
        debug 'Making monthly snapshot...'
        rsnapshot -c "${rsnapshot_cfg}" monthly
    fi
}


function print_help
{
    cat <<-EOF
		NAME
		    dsnapshot
		
		SYNOPSIS
		    dsnapshot [OPTION...] SOURCE_DIR [DESTINATION_DIR]
		
		DESCRIPTION
		    Uses rsnapshot to make incremental versions of a directory on the same
		    volume.
		
		OPTIONS
		    -c WHEN, --color=WHEN
		        Colorize the output. WHEN can be 'always', 'auto' (default if
		        omitted), or 'never'. With 'auto' it emits color codes only
		        when standard output is connected to a terminal.
		
		    -s, --source-dir
		        The directory to make snapshots of.
		
		    -d, --debug
		        Enable debug output.
		
		    -t, --test
		        Test mode for development. Set certain variables to hardcoded defaults.
		
		    -h, --help
		        print this help text and exit.
		
		EXAMPLES
		    dsnapshot /home/fred/Documents /home/fred/backup/Documents
		
		    dsnapshot /srv/backup/users/fred/music/latest /srv/backup/users/fred/music/snapshots
		
		EXIT CODES
		    0  Success
		    1  Error
		    64 Command line usage error
		
		    Some exit codes based on /usr/include/sysexits.h
	EOF
}


function parse_opts
{
    #
    # Parse the command-line arguments.
    #
    # Code borrowed and modified from here:
    # https://stackoverflow.com/questions/192249/how-do-i-parse-command-line-arguments-in-bash#answer-29754866
    #

    ! getopt --test > /dev/null 
    if [[ ${PIPESTATUS[0]} -ne 4 ]]
    then
        die 'I’m sorry, cannot parse command line parameters in this environment. `getopt --test` failed.'
        exit 71
    fi

    #
    # Declare option arguments.
    #
    # For options that take a parameter, put a : after the letter or name, ex:
    #
    #   OPTIONS=s:dt
    #   LONGOPTS=source:,debug,test
    #
    OPTIONS=c:dth
    LONGOPTS=color:,debug,test,help

    # Use ! and PIPESTATUS to get exit code with errexit set.
    # Temporarily store output to be able to check for errors.
    # Activate quoting/enhanced mode (e.g. by writing out “--options”).
    # Pass arguments only via   -- "$@"   to separate them correctly.
    ! PARSED=$(getopt --options=$OPTIONS --longoptions=$LONGOPTS --name "$0" -- "$@")
    if [[ ${PIPESTATUS[0]} -ne 0 ]]
    then
        # e.g. return value is 1
        #  then getopt has complained about wrong arguments to stdout
        exit 70
    fi
    # read getopt’s output this way to handle the quoting right:
    eval set -- "$PARSED"

    # Set defaults here or earlier, if any.

    local input_color_option

    #
    # Now enjoy the options in order and nicely split until we see --
    #
    # For options that take a parameter, write a case like this:
    #
    #   -s|--source)
    #       source="$2"
    #       shift 2
    #       ;;
    #
    while true
    do
        case "$1" in
            -c|--color)
                input_color_option="$2"
                shift 2
                ;;
            -d|--debug)
                DEBUG=true
                shift
                ;;
            -t|--test)
                export TEST=true
                shift
                ;;
            -h|--help)
                print_help
                exit
                ;;
            --)
                shift
                break
                ;;
            *)
                echo "Internal software error"
                exit 70
                ;;
        esac
    done


    case "${input_color_option}" in
        always|yes|force)
            color_option=always
            ;;
        never|no|none)
            color_option=never
            ;;
        auto|tty|if-tty)
            # Defaults to this if unset.
            color_option=auto
            ;;
        '')
            # Let the color function choose the default.
            ;;
        *)
            alarm "Invalid value ${input_color_option} for --color."
            echo
            print_help
            # "command line usage error" in /usr/include/sysexits.h.
            exit 64
            ;;
    esac


    if [ -z "${1}" ]
    then
        die 'ERROR: No source dir specified.' 64
    fi
    source_dir="${1}"

    if [ ! -d "${source_dir}" ]
    then
        die 'ERROR: Invalid source directory.' 64
    fi
    # Ensure source_dir is a fully qualified path with trailing slash.
    source_dir="$(cd "$(dirname "${source_dir}")" && pwd)/$(basename "${source_dir}")/"
    debug "source_dir: ${source_dir}"


    if [ ! -z "${2}" ]
    then
        snapshot_dir="${2}"
    else
        snapshot_dir="$(dirname ${source_dir})/snapshots"
    fi
    check_directory "${snapshot_dir}"
    # Ensure $snapshot_dir is a full path with a trailing slash.
    snapshot_dir="$(cd $snapshot_dir && pwd)/"
    debug "snapshot_dir: ${snapshot_dir}"
}


#
# Clean up the temp directory.
#
# The trap command ensures this is called upon exit, even if the program exits
# with an error.
#
function clean_up
{
    if [ -d "${temp_dir}" ]
    then
        rm -rf "${temp_dir}"
    fi
}
trap clean_up EXIT


#
# bool — medium strictness boolean value checking.
#
bool() ([ -z "${2+x}" ] && [[ $1 == true ]])


#
# Returns success (0) if colour should be output and failure (1) otherwise.
#
# Usage:
#
#   if color; then …; fi
#
# Defaults to 'auto' if global $color_option is unset or an empty string.
#
# Exits with an error message if global $color_option is an invalid value.
#
function color
{
    case "${color_option}" in
        always)
            return 0
            ;;
        never)
            return 1
            ;;
        auto|'')
            # Output color when stdout is a terminal.
            if [ -t 1 ]
            then
                # stdout is a terminal. Use color output.
                return 0
            else
                # stdout is not a terminal. Do not use color output.
                return 1
            fi
            ;;
        *)
            set_color_option="${color_option}"
            # Set a valid color_option so we can output our error message.
            color_option=auto
            die "Internal software error: Invalid color_option: ${set_color_option}." 70
            ;;
    esac
}


#
# warn - print warning message
#
# $1 - message
#
function warn
{
    if color
    then
        # print to regular output in regular orange
        printf "\033[0;33m"
    fi

    # Print the message with regular `echo` to prevent anything in the string
    # from being interpreted as formatting characters.
    echo "${1}"

    if color
    then
        printf "\033[m"
    fi
}


#
# alarm - print alarm / error message
#
# $1 - message
#
function alarm
{
    if color
    then
        # print to error output in bold red
        printf "\033[1;31m" >&2
    fi

    # Print the message with regular `echo` to prevent anything in the string
    # from being interpreted as formatting characters.
    echo "${1}" >&2

    if color
    then
        printf "\033[m" >&2
    fi
}


#
# die - print an alarm message and exit with an error code
#
# $1 - error message to print
# $2 - (optional) error code to exit with, defaults to 1
#
function die
{
    alarm "${1}"

    # Use the return code if it is numeric and not an empty string.
    if echo "${2}" | grep -qE '^[0-9]+$'
    then
        exit ${2}
    else
        exit 1
    fi
}


#
# check_err - check an error code and exit if it’s not success (0).
#
# $1 - return code to check
# $2 - (optional) text to display on failure. Defaults to basic message.
# $3 - (optional) error code to exit with, defaults to 1
#
function check_err
{
    local a=$1

    # Empty strings will evaluate as equal to 0, so check for them first.
    if [ -z "${a}" ]
    then
        # An empty string means this function was called incorrectly, but it
        # was not given a failure return code, so don’t exit.
        warn "WARNING: check_err called with no return code."
        return

    elif ! echo "${a}" | grep -qE '^[0-9]+$'
    then
        warn "WARNING: check_err called with non‐numeric value."
        return

    elif ! (( a == 0 ))
    then
        failure=true
    fi

    if [[ $failure == true ]]
    then
        if [ -z "${2}" ]
        then
            message="Command returned fatal error."
        else
            message="${2}"
        fi

        # Use the return code if it is numeric and not an empty string.
        if echo "${3}" | grep -qE '^[0-9]+$'
        then
            return_code="${3}"
        else
            return_code=1
        fi

        die "${message}" "${return_code}"
    fi
}


#
# debug - print debug message to stderr if DEBUG is set to 'true'
#
# $1 - message
#
function debug
{
    if bool $DEBUG
    then
        echo "${1}" >&2
    fi
}


#
# check_directory - check to see if a directory exists. Create it if it does
# not.
#
function check_directory
{
    if [ ! -d "${1}" ]
    then
        mkdir -p "${1}"
        check_err $? 'Directory ${1} could not be created. Aborting.'
    fi

    # We check the dir by changing to it. We must change to it in a subshell to
    # avoid changing the current directory of the calling command.
    err="$(if ! cd "${1}"; then echo "Cannot access directory ${1}. Aborting."; fi)"

    if [ ! -z "${err}" ]
    then
        die "${err}"
    fi
}


main "${@}"
